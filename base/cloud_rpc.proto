//
// COPYRIGHT 2018 Brightgate Inc. All rights reserved.
//
// This copyright notice is Copyright Management Information under 17 USC 1202
// and is included to protect this work and deter copyright infringement.
// Removal or alteration of this Copyright Management Information without the
// express written permission of Brightgate Inc is prohibited, and any
// such unauthorized removal or alteration will be a violation of federal law.
//
// vim:set comments=b\://:

// # Field number partitioning
//
// We write field numbers as hexadecimal integer literals, so that the
// partitioning is evident.  So that we might combine the messages into
// a smaller set of unified messages in the future, we partition the
// per-message field numbers into ranges.  (This choice trades off
// message size against later refactoring.)
//
// ## Common field numbers
//
// 0x01  Timestamp for event/message.
// 0x02  Sender string for event/message.
// ...
// 0x0f
//
// # Conventions
// - MAC addresses are the low 6 bytes of a 64-bit fixed integer.
// - IPv4 addresses are a 32-bit fixed integer.

syntax = "proto3";

package cloud_rpc;
import "base_msg.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

//
// Events-- "fire and forget"
//
// Heartbeat indicates that the appliance is up and helps track reboots
message Heartbeat {
	google.protobuf.Timestamp boot_time = 0x1;
	google.protobuf.Timestamp record_time = 0x2;
}

message InventoryReport {
	base_msg.DeviceInventory inventory = 0x1;
}

// Cloud simplified version of EventNetException
// XXX would like feedback on how closely to have this mirror EventNetException
// or if we should commonize them.
message NetException {
	google.protobuf.Timestamp timestamp = 0x01;
	string protocol = 0x02;

	string reason = 0x3;
	string message = 0x4;
	fixed64 mac_address = 0x5;
	fixed32 ipv4_address = 0x6;
	repeated string details = 0x7;
}

message PutEventRequest {
	string subTopic = 0x01;
	google.protobuf.Any payload = 0x02;
}

message PutEventResponse {
	int32 result = 0x01;
}

service Event {
	rpc Put(PutEventRequest) returns (PutEventResponse) {};
}

message SignedURL {
	string object = 0x01;
	string url = 0x02;
}

message GenerateURLRequest {
	// The object name is the primary key, how a client can match up
	// request and response.
	repeated string objects = 0x01;
	string prefix = 0x02;
	string content_type = 0x03;
	string http_method = 0x04;
}

message GenerateURLResponse {
	repeated SignedURL urls = 0x01;
}

service CloudStorage{
	rpc GenerateURL(GenerateURLRequest) returns (GenerateURLResponse) {};
}
