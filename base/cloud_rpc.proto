//
// COPYRIGHT 2018 Brightgate Inc. All rights reserved.
//
// This copyright notice is Copyright Management Information under 17 USC 1202
// and is included to protect this work and deter copyright infringement.
// Removal or alteration of this Copyright Management Information without the
// express written permission of Brightgate Inc is prohibited, and any
// such unauthorized removal or alteration will be a violation of federal law.
//
// vim:set comments=b\://:

// # Field number partitioning
//
// We write field numbers as hexadecimal integer literals, so that the
// partitioning is evident.  So that we might combine the messages into
// a smaller set of unified messages in the future, we partition the
// per-message field numbers into ranges.  (This choice trades off
// message size against later refactoring.)
//
// ## Common field numbers
//
// 0x01  Timestamp for event/message.
// 0x02  Sender string for event/message.
// ...
// 0x0f
//
// # Conventions
// - MAC addresses are the low 6 bytes of a 64-bit fixed integer.
// - IPv4 addresses are a 32-bit fixed integer.

syntax = "proto2";

package cloud_rpc;
import "base_msg.proto";

// XXX Can we assume a shared time domain?
// XXX Need REST annotations.

message UpcallRequest {
	optional bytes HMAC = 0x10;
	optional string uuid = 0x100;
	repeated string wan_hwaddr = 0x101;
	repeated string component_version = 0x110;
	optional int64 uptime_elapsed = 0x111;
	optional string boot_time = 0x112;
	optional string record_time = 0x113;
	optional int32 net_host_count = 0x120;
}

message UpcallResponse {
	optional int64 upcall_elapsed = 0x210;   // nanoseconds
	optional int64 downcall_elapsed = 0x211; // nanoseconds
}

service Upbeat {
	rpc Upcall(UpcallRequest) returns (UpcallResponse) {};
}

// Downbeat is when the cloud attempts to probe the appliance.  I am
// assuming we will use ICMP messages for this purpose.

message InventoryReport {
	optional bytes HMAC = 0x10;
	optional string uuid = 0x11;
	repeated string wan_hwaddr = 0x12;
	optional base_msg.DeviceInventory inventory = 0x400;
}

service Inventory {
	rpc Upcall(InventoryReport) returns (UpcallResponse) {};
}

// Cloud simplified version of EventNetException
// XXX would like feedback on how closely to have this mirror EventNetException
// or if we should commonize them.
message NetException {
	optional string timestamp = 0x01;
	optional string protocol = 0x02;

	optional string reason = 0x3;
	optional string message = 0x4;
	optional fixed64 mac_address = 0x5;
	optional fixed32 ipv4_address = 0x6;
	repeated string details = 0x7;
}
