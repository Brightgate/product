//
// COPYRIGHT 2019 Brightgate Inc. All rights reserved.
//
// This copyright notice is Copyright Management Information under 17 USC 1202
// and is included to protect this work and deter copyright infringement.
// Removal or alteration of this Copyright Management Information without the
// express written permission of Brightgate Inc is prohibited, and any
// such unauthorized removal or alteration will be a violation of federal law.
//
// vim:set comments=b\://:

// # Field number partitioning
//
// We write field numbers as hexadecimal integer literals, so that the
// partitioning is evident.  So that we might combine the messages into
// a smaller set of unified messages in the future, we partition the
// per-message field numbers into ranges.  (This choice trades off
// message size against later refactoring.)
//
// ## Common field numbers
//
// 0x01  Timestamp for event/message.
// 0x02  Sender string for event/message.
// ...
// 0x0f
//
// # Conventions
// - MAC addresses are the low 6 bytes of a 64-bit fixed integer.
// - IPv4 addresses are a 32-bit fixed integer.

syntax = "proto3";

package cloud_rpc;
import "base_msg.proto";
import "cfgmsg.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

//
// Events-- "fire and forget"
//
// Heartbeat indicates that the appliance is up and helps track reboots
message Heartbeat {
	google.protobuf.Timestamp boot_time = 0x1;
	google.protobuf.Timestamp record_time = 0x2;
}

message InventoryReport {
	base_msg.DeviceInventory inventory = 0x1;
}

message UpgradeReport {
	enum Result {
		SUCCESS = 0; // Upgrade succeeded
		FAILURE = 1; // Upgrade failed
		REPORT  = 2; // Running this release
	}

	Result result           = 0x01;
	string release_uuid     = 0x02;
	bytes output            = 0x03;
	google.protobuf.Timestamp record_time = 0x04;
	map<string, string> commits = 0x05;
}

// Cloud simplified version of EventNetException
// XXX would like feedback on how closely to have this mirror EventNetException
// or if we should commonize them.
message NetException {
	google.protobuf.Timestamp timestamp = 0x01;
	string protocol = 0x02;

	string reason = 0x3;
	string message = 0x4;
	fixed64 mac_address = 0x5;
	fixed32 ipv4_address = 0x6;
	repeated string details = 0x7;
	string virtualAP = 0x08;
}

message PutEventRequest {
	string subTopic = 0x01;
	google.protobuf.Any payload = 0x02;
}

message PutEventResponse {
	enum Result {
		SUCCESS = 0;
		BAD_ENDPOINT = 1;
	}

	Result result = 0x01;
	string url = 0x02;
}

service Event {
	rpc Put(PutEventRequest) returns (PutEventResponse) {};
}

message SignedURL {
	string object = 0x01;
	string url = 0x02;
}

message GenerateURLRequest {
	// The object name is the primary key, how a client can match up
	// request and response.
	repeated string objects = 0x01;
	string prefix = 0x02;
	string content_type = 0x03;
	string http_method = 0x04;
}

message GenerateURLResponse {
	repeated SignedURL urls = 0x01;
}

service CloudStorage{
	rpc GenerateURL(GenerateURLRequest) returns (GenerateURLResponse) {};
}

message CfgUpdate {
	enum Type {
		UPDATE = 0;
		DELETE = 1;
	}

	Type type				= 0x10;
	string property				= 0x11;
	string value				= 0x12;
	google.protobuf.Timestamp expires	= 0x13;
	bytes hash				= 0x14;
}

message CfgBackEndHello {
	google.protobuf.Timestamp time	= 0x01;
	string siteUUID   	        = 0x02;
	// version of the config tree on the appliance
	int32 version			= 0x03;

	// hash value calculated at the tree root
	bytes hash			= 0x04;
}

message CfgBackEndDownload {
	google.protobuf.Timestamp time	= 0x01;
	string siteUUID  		= 0x02;

	// max config version the appliance can support
	int32 version			= 0x03;
}

message CfgBackEndUpdate {
	google.protobuf.Timestamp time	= 0x01;
	string siteUUID		        = 0x02;
	int32 version			= 0x03;
	repeated CfgUpdate updates	= 0x05;
}

message CfgBackEndFetchCmds {
	google.protobuf.Timestamp time  = 0x01;
	string siteUUID		        = 0x02;
	int32 version			= 0x03;
	int64 lastCmdID			= 0x04;
	// If non-zero, the number of commands which can be returned; else 1
	uint32 maxCmds			= 0x05;
}

message CfgBackEndCompletions {
	google.protobuf.Timestamp time			= 0x01;
	string siteUUID				        = 0x02;
	repeated cfgmsg.ConfigResponse completions	= 0x03;
}

message CfgBackEndResponse {
	enum OpResponse {
		OK		= 0;
		ERROR		= 1;
		BADVERSION	= 2;
		NOCONFIG	= 3;
	}

	google.protobuf.Timestamp time		= 0x01;
	OpResponse response			= 0x02;
	string errmsg				= 0x03;
	repeated cfgmsg.ConfigQuery cmds	= 0x04;
	bytes value				= 0x05;
}

service ConfigBackEnd{
	rpc Hello(CfgBackEndHello) returns (CfgBackEndResponse) {};
	rpc Download(CfgBackEndDownload) returns (CfgBackEndResponse) {};
	rpc Update(CfgBackEndUpdate) returns (CfgBackEndResponse) {};
	rpc FetchCmds(CfgBackEndFetchCmds) returns (CfgBackEndResponse) {};
	rpc FetchStream(CfgBackEndFetchCmds) returns (stream CfgBackEndResponse) {};
	rpc CompleteCmds(CfgBackEndCompletions) returns (CfgBackEndResponse) {};
}

message CfgFrontEndPing {
	google.protobuf.Timestamp time	= 0x01;
}

message CfgCmdID {
	google.protobuf.Timestamp time	= 0x01;
	string siteUUID		        = 0x02;
	int64 cmdID			= 0x03;
}

message CfgFrontEndMonitor {
	google.protobuf.Timestamp time	= 0x01;
	string siteUUID		        = 0x02;
}

message CfgFrontEndUpdate {
	google.protobuf.Timestamp time	= 0x01;

	enum UpdateResponse {
		OK		= 0;
		FAILED		= 1;
	}
	UpdateResponse response		= 0x02;
	string errmsg			= 0x03;
	repeated CfgUpdate updates	= 0x04;
}

service ConfigFrontEnd{
	rpc Ping(CfgFrontEndPing) returns (CfgFrontEndPing) {};
	rpc Submit(cfgmsg.ConfigQuery) returns (cfgmsg.ConfigResponse) {};
	rpc Status(CfgCmdID) returns (cfgmsg.ConfigResponse) {};
	rpc Cancel(CfgCmdID) returns (cfgmsg.ConfigResponse) {};
	rpc Monitor(CfgFrontEndMonitor) returns (stream CfgFrontEndUpdate) {};
}

message CertificateRequest {
	bytes cert_fingerprint	= 0x01;
}

message CertificateResponse {
	bytes fingerprint	= 0x02;
	bytes certificate	= 0x03;
	bytes issuer_cert	= 0x04;
	bytes key		= 0x05;
}

service CertificateManager {
	rpc Download(CertificateRequest) returns (CertificateResponse) {};
}

message ReleaseRequest {
	int32 min_version       = 0x01;
	int32 max_version       = 0x02;
}

message ReleaseResponse {
	int32 version           = 0x01;
	// This is a JSON representation of the Release type defined in
	// bg/common/release; the server and client need to agree on what its
	// internal structure is.
	string release		= 0x02;
}

service ReleaseManager {
	rpc FetchDescriptor(ReleaseRequest) returns (ReleaseResponse) {};
}
